"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type Category {
  createdAt: Float!
  description: String!
  id: ID!
  name: String!
  slug: String!
  updatedAt: Float!
}

input CreateCategoryInput {
  description: String = ""
  name: String!
}

input CreatePostInput {
  avatar: ID!
  category: ID!
  content: LocalizationContentInput!
  description: LocalizationFieldInput!
  tags: [String!]
  title: LocalizationFieldInput!
}

input CreateTagInput {
  description: String = ""
  name: String!
}

"""Return all categories"""
input GetCategoriesFilter {
  name: String
}

type Image {
  createdAt: Float!
  height: Float!
  id: ID!
  mimetype: String!
  path: String!
  size: Float!
  storage: MEDIA_STORAGE_ENUM!
  updatedAt: Float!
  width: Float!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

enum LANGUAGE_ENUM {
  en
  jp
  vn
}

interface LocalizationBase {
  en: String!
  jp: String
  vn: String
}

type LocalizationContent implements LocalizationContentBase {
  en: JSON!
  id: String
  jp: JSON
  vn: JSON
}

interface LocalizationContentBase {
  en: JSON!
  jp: JSON
  vn: JSON
}

input LocalizationContentInput {
  en: JSON!
  jp: JSON
  vn: JSON
}

type LocalizationDescription implements LocalizationBase {
  en: String!
  id: String
  jp: String
  vn: String
}

input LocalizationFieldInput {
  en: String!
  jp: String
  vn: String
}

type LocalizationTitle implements LocalizationBase {
  en: String!
  id: String
  jp: String
  vn: String
}

enum MEDIA_STORAGE_ENUM {
  LOCAL
}

type Mutation {
  createCategory(input: CreateCategoryInput!): Category!
  createPost(input: CreatePostInput!): Post!
  createTag(input: CreateTagInput!): Tag!
  removeCategory(input: RemoveCategoryInput!): Category!
  removePost(input: RemovePostInput!): Post!
  signIn(input: SignInInput!): String!
  signUp(input: SignUpInput!): String!
  updateCategory(input: UpdateCategoryInput!): Category!
  updatePost(input: UpdatePostInput!): Post!
}

type Notify {
  id: String!
  message: String!
  success: Boolean
  user: User!
}

type Post {
  avatar: Image!
  category: Category!
  content: LocalizationContent!
  createdAt: Float!
  description: LocalizationDescription!
  id: ID!
  slug: String!

  """Tag field is not avaliable now. Backend always return an empty array"""
  tags: [String!]!
  title: LocalizationTitle!
  updatedAt: Float!
  views: Float!
}

input PostFilter {
  slug: String!
}

input PostsFilter {
  category: ID
  lang: LANGUAGE_ENUM = en
  limit: Int!
  offset: Int!
  sort: String!
  tags: [ID!]
  title: String
}

type Query {
  categories(filter: GetCategoriesFilter!): [Category!]!
  categoriesCount(filter: GetCategoriesFilter!): Float!
  countPosts(filter: PostsFilter!): Int!
  me: User!
  post(filter: PostFilter!): Post!
  posts(filter: PostsFilter!): [Post!]!
}

input RemoveCategoryInput {
  id: ID!
}

input RemovePostInput {
  id: ID!
}

input SignInInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  name: String!
  password: String!
}

type Subscription {
  notifyFired: Notify!
}

type Tag {
  createdAt: Float!
  description: String
  id: ID!
  name: String!
  slug: String!
  updatedAt: Float!
}

input UpdateCategoryInput {
  description: String = ""
  id: ID!
  name: String
}

input UpdatePostInput {
  avatar: ID
  category: ID
  content: LocalizationContentInput
  description: LocalizationFieldInput
  id: ID!
  tags: [String!]
  title: LocalizationFieldInput
}

type User {
  avatar: String!
  createdAt: Float!
  email: String!
  id: ID!
  name: String!
  role: USER_ROLE_ENUM!
  updatedAt: Float!
}

enum USER_ROLE_ENUM {
  ADMIN
  SUPER_ADMIN
  USER
}
